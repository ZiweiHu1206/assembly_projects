
Input 
Store n /get user input for upper bound n
Input
Store m /get user input for lower bound m
Load n /for skipcond egde case that n is even, m == n will not be skipped
Add one
Store n

check_not_greater, Load m /check current m is not greater than n
Subt n
Skipcond 000 
Jump Done /if m is equal to or greater than n+1, output sum
Load m
Store temp
Skipcond 000 /if temp is negative, go to neg block, otherwise go to pos block
Jump Pos
Jump Neg

/check positive m is even or odd
Pos, Skipcond 400  /if temp == 0
Jump Pos_continue
Jump Even 

Pos_continue, Skipcond 000 
Jump Pos_subt
Jump Odd  /if temp == -1, m is odd and positive

Pos_subt, Subt two 
Store temp
Jump Pos

/check negative m is even or odd
Neg, Skipcond 400
Jump Neg_continue
Jump Even 

Neg_continue, Skipcond 800
Jump Neg_add
Jump Odd /if temp == 1, m is odd and negative

Neg_add, Add two
Store temp
Jump Neg

Even, Load sum /if current m is even, add m to sum
Add m
Store sum
Load m
Add one /increase m by 1 and continue checking 
Store m 
Jump check_not_greater /check current m is greater than n or not

Odd, Load m /if current m is odd
Add one /increase m by 1 and continue checking
Store m
Jump check_not_greater

Done, Load sum 
Output /output the sum
Load sum
Clear
Store sum
Halt

n, Dec 0
m, Dec 0
sum, Dec 0
one, Dec 1
two, Dec 2
temp, Dec 0
